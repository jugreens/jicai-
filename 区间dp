//https://blog.csdn.net/qq_41289920/article/details/88049573
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6+10;

const int mod = 1e9+7 ;
int dp[55][550];

char a[55];


int init(char a)
{
    return a-'0';
}
int main()
{
    cin >> a+1;
    int len = strlen(a+1);
    for(int i = 1 ; i <= len ; i++)
    {
        for(int j = 0 ; j <= 550 ; j++)
        {
            dp[i][j] = dp[i-1][j];
            if(j-init(a[i])>=0)
                dp[i][j]+=dp[i-1][j-init(a[i])];
            dp[i][j]%=mod;
        }
        dp[i][init(a[i])]++;

    }
    int ans = 0 ;
    for(int i = 0 ; i <= 550 ; i++)
    {
        if(i%3==0)
        {
            ans+=dp[len][i];
            ans%=mod;
            //cout << dp[len][i] << " " << i <<endl;
        }
    }
    cout <<ans <<endl;
}

优化版
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6+10;

const int mod = 1e9+7 ;
int dp[55][550];

char a[55];


int init(char a)
{
    return a-'0';
}
int main()
{
    cin >> a+1;
    int len = strlen(a+1);
    for(int i = 1 ; i <= len ; i++)
    {
        for(int j = 0 ; j < 3; j++)
        {
            dp[i][j]=dp[i-1][j];
            dp[i][j]+=dp[i-1][(j+12-init(a[i]))%3];
            dp[i][j]%=mod;
        }
        dp[i][init(a[i])%3]++;
    }
    int ans = dp[len][0]%mod;
    cout <<ans <<endl;
}




//https://ac.nowcoder.com/acm/problem/21303

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6+10;
char a[N] , b[N] ;
int dp[105][105][105];
int main()
{
    cin >> a+1 ;
    cin >> b+1 ;
    int n = strlen(a+1);
    int m = strlen(b+1);
    dp[0][0][0]=1;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            for(int k=0;k<=n;k++)
            {
                if(dp[i][j][k])
                {
                    if(!k&&a[i+1]==b[j+1])
                        dp[i+1][j+1][k]=1;
                    if(a[i+1]=='(')
                        dp[i+1][j][k+1]=1;
                    else if(k)
                        dp[i+1][j][k-1]=1;

                }
            }
        }
    }
    if(dp[n][m][0])
        cout <<"Possible"<<endl;
    else
        cout <<"Impossible"<<endl;
    return 0;
}

