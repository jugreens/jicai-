//https://blog.csdn.net/qq_41289920/article/details/88049573
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6+10;
const int mod = 1e9+7 ;
int dp[55][550];

char a[55];


int init(char a)
{
    return a-'0';
}
int main()
{
    cin >> a+1;
    int len = strlen(a+1);
    for(int i = 1 ; i <= len ; i++)
    {
        for(int j = 0 ; j <= 550 ; j++)
        {
            dp[i][j] = dp[i-1][j];
            if(j-init(a[i])>=0)
                dp[i][j]+=dp[i-1][j-init(a[i])];
            dp[i][j]%=mod;
        }
        dp[i][init(a[i])]++;

    }
    int ans = 0 ;
    for(int i = 0 ; i <= 550 ; i++)
    {
        if(i%3==0)
        {
            ans+=dp[len][i];
            ans%=mod;
            //cout << dp[len][i] << " " << i <<endl;
        }
    }
    cout <<ans <<endl;
}

优化版
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6+10;

const int mod = 1e9+7 ;
int dp[55][550];

char a[55];


int init(char a)
{
    return a-'0';
}
int main()
{
    cin >> a+1;
    int len = strlen(a+1);
    for(int i = 1 ; i <= len ; i++)
    {
        for(int j = 0 ; j < 3; j++)
        {
            dp[i][j]=dp[i-1][j];
            dp[i][j]+=dp[i-1][(j+12-init(a[i]))%3];
            dp[i][j]%=mod;
        }
        dp[i][init(a[i])%3]++;
    }
    int ans = dp[len][0]%mod;
    cout <<ans <<endl;
}




//https://ac.nowcoder.com/acm/problem/21303

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6+10;
char a[N] , b[N] ;
int dp[105][105][105];
int main()
{
    cin >> a+1 ;
    cin >> b+1 ;
    int n = strlen(a+1);
    int m = strlen(b+1);
    dp[0][0][0]=1;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            for(int k=0;k<=n;k++)
            {
                if(dp[i][j][k])
                {
                    if(!k&&a[i+1]==b[j+1])
                        dp[i+1][j+1][k]=1;
                    if(a[i+1]=='(')
                        dp[i+1][j][k+1]=1;
                    else if(k)
                        dp[i+1][j][k-1]=1;

                }
            }
        }
    }
    if(dp[n][m][0])
        cout <<"Possible"<<endl;
    else
        cout <<"Impossible"<<endl;
    return 0;
}


//https://ac.nowcoder.com/acm/problem/21587
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 3003;
const int M = 1e9+7;
ll dp[N], a[N];

int main() 
{
    string s;
    cin >> s;
    int n = s.size();
    a[0] = 1;
    for(int i = 1; i < n; i++) 
    {
        ll sum = 0, tmp;
        for(int j = n - 1; j > i; j--) 
        {
            tmp = dp[j];
            if(s[j] == s[i-1]) 
            {
                dp[j] = (dp[j] + sum + 1) % M;
            }
            sum = (sum + tmp) % M;
            a[i] = (a[i] + dp[j]) % M;
        }
        a[i] = (a[i] + 1) % M;
    }
    ll ans = 0;
    for(int i = 0; i < n; i++) 
        ans = ans ^ (a[i] * (i + 1)) % M;
    cout << ans;
 
  return 0;
}

P1880 [NOI1995]石子合并
#include <stdio.h>
#include <iostream>
#include <map>
#include <algorithm>
#include <cstring>
#include <stack>
#include <cmath>
#include <queue>
#include <vector>
#include <iterator>
#include <set>
using namespace std;
typedef long long ll;
const ll N = 1e5 + 10;
const ll INF=0x3f3f3f3f3f3f3f3f;
ll dp1[210][210] , dp2[210][210];
ll sum[210];
ll a[N];
int main()
{
    ll n;
    cin >> n ;
    for(ll i = 1 ; i <= n ; i++)
    {
        cin >> a[i];
        a[i+n]=a[i];
    }
    for(ll i = 1 ; i <= 2*n ;i++)
        sum[i]=sum[i-1]+a[i];
    memset(dp1,0,sizeof(dp1));
    for(ll len = 2 ; len <= n ; len++)
    {
        for(ll i = 1 ; i +len-1 <=2*n ; i++)
        {
            ll j = i+len-1 ;
            dp2[i][j]=INF ;
            for(ll k = i ; k < j ; k++)
            {
                //cout <<dp1[i][j] << " " << dp1[i][k]+dp1[k+1][j]+sum[j]-sum[i-1] <<endl;
                dp1[i][j] = max(dp1[i][j],dp1[i][k]+dp1[k+1][j]+sum[j]-sum[i-1]);
                dp2[i][j] = min(dp2[i][j],dp2[i][k]+dp2[k+1][j]+sum[j]-sum[i-1]);
            }
        }
    }
    ll maxn = 0 , minn = INF ;
    for(int i = 1 ; i <= n ; i++)
    {
        maxn = max(maxn,dp1[i][i+n-1]);
        minn = min(minn,dp2[i][i+n-1]);
    }
    cout << minn <<endl;cout  << maxn <<endl;
}
