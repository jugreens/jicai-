#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6+10;
const int mod = 1e9+7;
int q, k, dp[maxn][2], l, r;
int main()
{
    while(scanf("%d%d", &q, &k) != EOF) {
        dp[0][0] = 0;
        for (int i = 1 ; i < maxn ; i++) {
            if (i < k) dp[i][0] = dp[i - 1][0] + 1;
            else {
                dp[i][0] = (dp[i - 1][0]+dp[i-1][1] + 1) % mod;
                dp[i][1] = (dp[i - k][0] + 1) % mod;
            }
        }
        for (int i = 0 ; i < q ; i++) {
            scanf("%d%d", &l, &r);
            int ans = ((dp[r][0] + dp[r][1]) - (dp[l - 1][0] + dp[l - 1][1])) % mod;
            printf("%d\n", ans);
        }
    }
    return 0;
}
//https://www.cnblogs.com/qldabiaoge/p/9346289.html



//https://blog.csdn.net/dllpXFire/article/details/81131802

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e5+10;
const int mod = 1e9+7;
int dp[N][11] , a[N] ;
int sum[N];
int main()
{
    int n ,m ,  k ;
    while(~scanf("%d %d %d",&n,&m,&k))
    {
        memset(dp,0,sizeof(dp));
        memset(a,0,sizeof(a));
        memset(sum,0,sizeof(sum));
        for(int i = 1 ; i <= n ; i++)
            cin >> a[i];
        sum[0]=1;
        for(int i = 1 ; i <= n ; i++)
        {
            for(int j = i ; j>=1&&j>=i-m-1 ; j--)
            {
                sum[j] += (sum[j-1]-dp[j][a[i]]);
                sum[j]%=mod;
                dp[j][a[i]]=sum[j-1];
            }
        }
        int ans = (sum[n-m]+mod)%mod;
        cout <<ans <<endl;
    }
    return 0;
}


//https://ac.nowcoder.com/acm/problem/21738
#include<bits/stdc++.h>
using namespace std;
const int N = 1e5+50;
const int mod = 1e9+7;
typedef long long LL;
int dp[11][N],n,k;
vector<int> a[N];
int main(void)
{
	cin>>n>>k;
	for(int i=1; i<=k; i++)  //倍数预处理
		for(int j=2; i*j<=k; j++)
			a[i].push_back(i*j);

	memset(dp,0,sizeof(dp));  //边界初始化
	for(int i=1; i<=k; i++) dp[1][i] = 1;

	for(int i=2; i<=n; i++)  //位数枚举
	{
		LL ans = 0,sum=0,temp;  //注意这里要long long，防爆
		for(int j=1; j<=k; j++) ans = (ans+dp[i-1][j])%mod;  //前面的方案数总和
		for(int j=1; j<=k; j++)
		{
			temp = ans;
			dp[i][j] = (sum+dp[i-1][j])%mod;
			sum = (sum+dp[i-1][j])%mod;  //状态的累计
			temp = (temp+mod-sum)%mod;
			for(int q=0; q<a[j].size(); q++)
				temp = (temp+mod-dp[i-1][a[j][q]])%mod;  //枚举倍数减去
			dp[i][j] = (dp[i][j]+temp)%mod;
		}
	}
	LL res = 0;
	for(int i=1; i<=k; i++) res = (LL)(res+dp[n][i])%mod;
	cout<<res<<endl;
	return 0;
}

//https://ac.nowcoder.com/acm/problem/21652
#include <bits/stdc++.h>
using namespace std;

char s1[2505], s2[2505];
int dp[2][2505], pre[2][2505], mod = 1e9+7;

int main()
{
    scanf("%s%s",s1+1,s2+1);
    int len1 = strlen(s1+1), len2 = strlen(s2+1), cur = 0;
    dp[cur][0] = 1;
    for(int i = 0; i <= len1; ++i)
    {
        if(i) cur ^= 1;
        if(i) memset(dp[cur], 0, sizeof(dp[cur]));
        for(int j = 0; j <= len2; ++j)
        {
            if(i == 0 && j == 0) continue;
            if(j) pre[cur][j] = pre[cur][j-1] + (s2[j] == '(' ? 1 : -1);
            else pre[cur][j] = pre[cur^1][j] + (s1[i] == '(' ? 1 : -1);

            if(pre[cur][j] < 0) continue;
            if(i) dp[cur][j] += dp[cur^1][j];
            if(j) dp[cur][j] += dp[cur][j-1];
            dp[cur][j] %= mod;
        }
    }
    if(pre[cur][len2] == 0) printf("%d\n",dp[cur][len2]);
    else printf("0\n");
    return 0;
}//没看懂

记忆化搜索
//记忆化搜索
#include<algorithm>
#include<queue>
#include<string.h>
#include<cmath>
#include<vector>
using namespace std;
const int mod=1e9+7;
char str[2][2501];
int dp[2510][2510];//len1和len2,比较简单的dp数组，通俗易懂可以优化
int dfs(int len1,int len2,int index)
{
    if(index<0)return 0;//有了多余的右括号就要返回，不返回后面进来的左括号会和它抵消产生多余答案
    if(str[0][len1]=='\0'&&str[1][len2]=='\0'&&index==0)
        return 1;
    if(dp[len1][len2]!=-1)
        return dp[len1][len2];
    int ans=0;
    for(int i=0; i<2; i++)
    {
        if(i==0&&str[i][len1]!='\0')
            ans+=dfs(len1+1,len2,index+(str[i][len1]=='('?1:-1));
        if(i==1&&str[i][len2]!='\0')
            ans+=dfs(len1,len2+1,index+(str[i][len2]=='('?1:-1));
    }
	return dp[len1][len2]=ans%mod;
}
int main()
{
    memset(dp,-1,sizeof(dp));
    scanf("%s%s",str[0],str[1]);
    printf("%d\n",dfs(0,0,0));
}


https://ac.nowcoder.com/acm/contest/1071/A

#include <iostream>

#include <string>

#include <vector>

using namespace std;

 

int n,k;

char a[50];

//string a;

//vector<vector<long long>> num(n, vector<long long>(n+1, 0));

long long num[50][50];

long long dp[50][50][10];

 

int main()

{

    cin >> n >> k;

    cin >> a;

    for(int i=0; i<n; i++)

    {

        num[i][i] = a[i]-'0';

        dp[i][i][0] = num[i][i];

        for(int j=i+1; j<n; j++)

        {

            num[i][j] = num[i][j-1]*10+(a[j]-'0');

            dp[i][j][0] = num[i][j];

        }

    }

    for(int i=0; i<n; i++)

    {

        for(int j=i+1; j<n; j++)

        {

            for(int kk=1; kk<=k; kk++)

            {

                long long maxV = 0;

                for(int m=i; m<=j; m++)

                {

                    for(int left=0; left<=kk; left++)

                    {

                        if(dp[i][m][left]*dp[m+1][j][kk-left-1]>maxV)

                            maxV=dp[i][m][left]*dp[m+1][j][kk-left-1];

                    }

                }

                dp[i][j][kk] = maxV;

            }

        }

    }

    cout << dp[0][n-1][k];

    return 0;

}





